package antilopinae;

import com.github.kotlintelegrambot.Bot
import com.github.kotlintelegrambot.bot
import com.github.kotlintelegrambot.dispatch
import com.github.kotlintelegrambot.dispatcher.command
import com.github.kotlintelegrambot.dispatcher.handlers.MessageHandlerEnvironment
import com.github.kotlintelegrambot.dispatcher.message
import com.github.kotlintelegrambot.entities.*
import com.github.kotlintelegrambot.entities.keyboard.InlineKeyboardButton
import com.github.kotlintelegrambot.entities.keyboard.KeyboardButton
import com.github.kotlintelegrambot.entities.keyboard.WebAppInfo
import com.github.kotlintelegrambot.logging.LogLevel
import com.github.kotlintelegrambot.webhook
import kotlinx.coroutines.*
import kotlinx.coroutines.sync.Mutex
import kotlinx.coroutines.sync.withLock
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.Json
import java.net.URLEncoder
import java.nio.charset.StandardCharsets
import java.text.SimpleDateFormat
import java.util.*
import java.util.concurrent.TimeUnit

val remindersList = mutableListOf<Reminder>()
val remindersMutex = Mutex()

val dateFormatter = SimpleDateFormat("dd MMM yyyy '–≤' HH:mm z", Locale("ru"))
// init { dateFormatter.timeZone = TimeZone.getTimeZone("Europe/Moscow") } // –ü—Ä–∏–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–∑–æ–Ω—ã

fun main() {
    val botToken = System.getenv("SIGNAL_MESSAGE_BOT_TOKEN") ?: run {
        println("–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è SIGNAL_MESSAGE_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        return
    }
    val baseWebAppUrl = "https://antilopinae.github.io/Signal-Message-Telegram-Bot/"

    val bot = bot {
        token = botToken
        logLevel = LogLevel.Error

        dispatch {
            command("start") {
                val chatId = ChatId.fromId(message.chat.id)
                bot.sendMessage(
                    chatId = chatId,
                    text = "–ü—Ä–∏–≤–µ—Ç üëã\n\n" +
                            "–Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. " +
                            "–ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å, –∫–æ–≥–¥–∞ –∏ –∫–∞–∫ –æ –Ω—ë–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å.\n\n" +
                            "–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                            "/help - –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n" +
                            "/status - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n" +
                            "/unsubscribe - –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
                    parseMode = ParseMode.MARKDOWN
                )
                println("–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –¥–ª—è —á–∞—Ç–∞ ${chatId.id}")
            }

            command("help") {
                val chatId = ChatId.fromId(message.chat.id)
                bot.sendMessage(
                    chatId = chatId,
                    text = "‚ùì **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:**\n\n" +
                            "1. **–ü–µ—Ä–µ—à–ª–∏—Ç–µ** –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n" +
                            "2. –Ø –ø—Ä–µ–¥–ª–æ–∂—É –∫–Ω–æ–ø–∫—É **\"üóìÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\"**. –ù–∞–∂–º–∏—Ç–µ –µ–µ.\n" +
                            "3. –í –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ –≤—ã–±–µ—Ä–∏—Ç–µ **–¥–∞—Ç—É –∏ –≤—Ä–µ–º—è** –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n" +
                            "4. –ù–∞–∂–º–∏—Ç–µ **\"–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\"** –≤ —ç—Ç–æ–º –æ–∫–Ω–µ.\n" +
                            "5. –Ø –ø—Ä–∏—à–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–Ω—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏.\n\n" +
                            "üìú **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n" +
                            "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º\n" +
                            "/help - –≠—Ç–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n" +
                            "/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n" +
                            "/unsubscribe - –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n" +
                            "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)\n\n" +
                            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —Å–æ–æ–±—â–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É @antilopinae.",
                    parseMode = ParseMode.MARKDOWN
                )
                println("–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /help –¥–ª—è —á–∞—Ç–∞ ${chatId.id}")
            }

            command("settings") {
                val chatId = ChatId.fromId(message.chat.id)
                bot.sendMessage(
                    chatId = chatId,
                    text = "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!"
                )
                println("–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /settings –¥–ª—è —á–∞—Ç–∞ ${chatId.id}")
            }

            command("status") {
                val userChatId = message.chat.id
                GlobalScope.launch {
                    val userChatId = message.chat.id
                    println("--- –ö–û–ú–ê–ù–î–ê /status –í–´–ó–í–ê–ù–ê –î–õ–Ø –ß–ê–¢–ê $userChatId ---")
                    GlobalScope.launch {
                        val currentRemindersSnapshot = remindersMutex.withLock {
                            println("--- /status: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ remindersList –ü–ï–†–ï–î —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π (–≤—Å–µ–≥–æ ${remindersList.size}) ---")
                            remindersList.forEachIndexed { index, rem -> println("[$index]: $rem") }
                            remindersList.toList()
                        }

                        val userActiveReminders = currentRemindersSnapshot
                            .filter { it.userChatId == userChatId && !it.isSent }
                            .sortedBy { it.reminderTimestampMillis }

                        println("--- /status: –ù–∞–π–¥–µ–Ω–æ ${userActiveReminders.size} –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userChatId ---")
                        userActiveReminders.forEachIndexed { index, rem -> println("–ê–∫—Ç–∏–≤–Ω–æ–µ [$index]: $rem") }

                        if (userActiveReminders.isEmpty()) {
                            bot.sendMessage(ChatId.fromId(userChatId), "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. ‚ú®")
                        } else {
                            val remindersText = userActiveReminders.mapIndexed { index, reminder ->
                                val reminderTimeStr = dateFormatter.format(Date(reminder.reminderTimestampMillis))
                                var contentPreview = reminder.messageTextContent?.take(30)
                                    ?: reminder.originalMessageIdToForward?.let { "–∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" }
                                    ?: "—Å–æ–æ–±—â–µ–Ω–∏–µ"
                                if (contentPreview.length == 30 && (reminder.messageTextContent?.length
                                        ?: 0) > 30
                                ) contentPreview += "..."

                                "${index + 1}. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è \"$contentPreview\" –Ω–∞ $reminderTimeStr"
                            }.joinToString("\n\n")

                            bot.sendMessage(
                                chatId = ChatId.fromId(userChatId),
                                text = "üóìÔ∏è **–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:**\n\n$remindersText"
                            )
                        }
                    }
                    println("–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /status –¥–ª—è —á–∞—Ç–∞ ${userChatId}")
                }
            }

            command("unsubscribe") {
                val userChatId = message.chat.id
                var removedCount = 0
                GlobalScope.launch {
                    remindersMutex.withLock {
                        val initialSize = remindersList.size
                        remindersList.removeIf { it.userChatId == userChatId && !it.isSent }
                        removedCount = initialSize - remindersList.size
                    }

                    if (removedCount > 0) {
                        bot.sendMessage(ChatId.fromId(userChatId), "‚úÖ –í—Å–µ –≤–∞—à–∏ $removedCount –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")
                    } else {
                        bot.sendMessage(ChatId.fromId(userChatId), "–£ –≤–∞—Å –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
                    }
                    println("–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /unsubscribe –¥–ª—è —á–∞—Ç–∞ ${userChatId}, —É–¥–∞–ª–µ–Ω–æ $removedCount –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
                }
            }

            message {
                val incomingMessage = message
                val currentChatId = ChatId.fromId(incomingMessage.chat.id)
                val webAppDataFromMessage = incomingMessage.webAppData

                if (incomingMessage.text?.startsWith("/") == true) {
                    return@message
                }

                if (webAppDataFromMessage != null) {
                    val webAppDataJson = webAppDataFromMessage.data
                    println("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Web App: $webAppDataJson")

                    try {
                        @Serializable
                        data class ReminderRequestFromTwa(
                            val action: String,
                            val user_chat_id: String,
                            val reminder_type: String,
                            val reminder_timestamp_millis: Long,
                            val forwarded_to_bot_at_millis: Long,
                            val original_message_id: String? = null,
                            val original_chat_id: String? = null,
                            val text_content: String? = null
                        )

                        val request = Json { ignoreUnknownKeys = true }.decodeFromString<ReminderRequestFromTwa>(webAppDataJson.toString())

                        if (request.action == "set_reminder") {
                            val newReminder = Reminder(
                                userChatId = request.user_chat_id.toLong(),
                                reminderTimestampMillis = request.reminder_timestamp_millis,
                                forwardedToBotAtMillis = request.forwarded_to_bot_at_millis,
                                originalMessageIdToForward = if (request.reminder_type == "forward") request.original_message_id?.toLongOrNull() else null,
                                originalChatIdToForwardFrom = if (request.reminder_type == "forward") request.original_chat_id?.toLongOrNull() else null,
                                messageTextContent = if (request.reminder_type == "text_content") request.text_content else null
                            )

                            GlobalScope.launch {
                                remindersMutex.withLock {
                                    remindersList.add(newReminder)
                                    println("--- –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï –î–û–ë–ê–í–õ–ï–ù–û –í –°–ü–ò–°–û–ö ---")
                                    println("–í—Å–µ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Å–ø–∏—Å–∫–µ: ${remindersList.size}")
                                    remindersList.forEachIndexed { index, rem -> println("[$index]: $rem") }
                                }
                            }
                            println("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: $newReminder")

                            val reminderDate = Date(request.reminder_timestamp_millis)
                            var confirmationText = "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${dateFormatter.format(reminderDate)}"
                            if (request.reminder_type == "text_content" && newReminder.messageTextContent.isNullOrEmpty()) {
                                confirmationText += " (—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—ã–ª –∑–∞—Ö–≤–∞—á–µ–Ω, –±—É–¥–µ—Ç –æ–±—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ)"
                            }
                            bot.sendMessage(
                                chatId = ChatId.fromId(request.user_chat_id.toLong()),
                                text = confirmationText,
                                replyMarkup = ReplyKeyboardRemove()
                            )
//                            this.bot.editMessageReplyMarkup(
//                                chatId = ChatId.fromId(request.user_chat_id.toLong()),
//                                messageId = incomingMessage.messageId,
//                                replyMarkup = null
//                            )
                        }
                    } catch (e: Exception) {
                        println("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Web App: ${e.message}")
                        e.printStackTrace()
                        bot.sendMessage(
                            ChatId.fromId(message.chat.id),
                            text = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                        )
                    }
                }
                else if (incomingMessage.forwardDate != null || incomingMessage.forwardFrom != null || incomingMessage.forwardFromChat != null) {
                    println("–ü–û–õ–£–ß–ï–ù–û –ü–ï–†–ï–°–õ–ê–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï (ID: ${incomingMessage.messageId}) –æ—Ç ${incomingMessage.chat.username ?: "N/A"}")
                    handleForwardedContent(this, baseWebAppUrl)
                }
                else if (incomingMessage.text != null) {
                    println("–ü–æ–ª—É—á–µ–Ω–æ –û–ë–´–ß–ù–û–ï –¢–ï–ö–°–¢–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${incomingMessage.chat.username ?: "N/A"} (ID: ${currentChatId.id}): '${incomingMessage.text}'")
                    bot.sendMessage(
                        chatId = currentChatId,
                        text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."
                    )
                }
                else {
                    println("–ü–æ–ª—É—á–µ–Ω–æ –¥—Ä—É–≥–æ–µ (–Ω–µ —Ç–µ–∫—Å—Ç, –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ, –Ω–µ webapp data) —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${incomingMessage.chat.username ?: "N/A"} (ID: ${currentChatId.id})")
                    bot.sendMessage(
                        chatId = currentChatId,
                        text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏."
                    )
                }
            }
        }
    }

    bot.startPolling()
    startReminderScheduler(bot)
    println("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
}

private fun handleForwardedContent(env: MessageHandlerEnvironment, baseWebAppUrl: String) {
    val forwardedMessageToBot = env.message
    val userChatId = ChatId.fromId(forwardedMessageToBot.chat.id)

    val originalMessageIdForForward = forwardedMessageToBot.forwardFromMessageId
    val originalChatIdFromForForward = forwardedMessageToBot.forwardFromChat?.id
        ?: forwardedMessageToBot.forwardFrom?.id

    val eventHint = forwardedMessageToBot.text ?: forwardedMessageToBot.caption ?: "–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"
    val capturedTextContent = forwardedMessageToBot.text ?: forwardedMessageToBot.caption

    var webAppQueryParameters = "user_chat_id=${userChatId.id}" +
            "&event_hint=${URLEncoder.encode(eventHint.take(100), StandardCharsets.UTF_8.toString())}" +
            "&forwarded_to_bot_at=${forwardedMessageToBot.date}"

    if (originalMessageIdForForward != null && originalChatIdFromForForward != null) {
        webAppQueryParameters += "&type=forward" +
                "&original_message_id=$originalMessageIdForForward" +
                "&original_chat_id=$originalChatIdFromForForward"
        println("–ì–æ—Ç–æ–≤–∏–º TWA –¥–ª—è –ü–ï–†–ï–°–´–õ–ö–ò —Å–æ–æ–±—â–µ–Ω–∏—è ID $originalMessageIdForForward –∏–∑ —á–∞—Ç–∞ $originalChatIdFromForForward")
    } else {
        webAppQueryParameters += "&type=text_content"
        if (capturedTextContent != null) {
            webAppQueryParameters += "&text_content=${URLEncoder.encode(capturedTextContent.take(400), StandardCharsets.UTF_8.toString())}"
        }
        println("–ì–æ—Ç–æ–≤–∏–º TWA –¥–ª—è –û–¢–ü–†–ê–í–ö–ò –¢–ï–ö–°–¢–ê (–ø–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞). –¢–µ–∫—Å—Ç –∑–∞—Ö–≤–∞—á–µ–Ω: ${capturedTextContent != null}")
    }

    val finalWebAppUrl = "$baseWebAppUrl?$webAppQueryParameters"
    println("URL –¥–ª—è WebApp: $finalWebAppUrl")

    val webAppInfo = WebAppInfo(url = finalWebAppUrl)
//    val inlineKeyboardMarkup = InlineKeyboardMarkup.create(
//        listOf(
//            InlineKeyboardButton.WebApp("üóìÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", webAppInfo)
//        )
//    )
//
//    env.bot.sendMessage(
//        chatId = userChatId,
//        text = "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è: '${eventHint.take(50)}...'",
//        replyToMessageId = forwardedMessageToBot.messageId,
//        replyMarkup = inlineKeyboardMarkup
//    )

    val replyKeyboardMarkup = KeyboardReplyMarkup(
        keyboard = listOf(listOf(KeyboardButton(
            text = "üóìÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ",
            webApp = webAppInfo
        ))),
        resizeKeyboard = true,
        oneTimeKeyboard = true
    )

    env.bot.sendMessage(
        chatId = userChatId,
        text = "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è: '${eventHint.take(50)}'",
        replyToMessageId = forwardedMessageToBot.messageId,
        replyMarkup = replyKeyboardMarkup
    )
}

fun startReminderScheduler(bot: Bot) {
    GlobalScope.launch(Dispatchers.IO) {
        while (isActive) {
            try {
                val now = System.currentTimeMillis()
                val dueReminders = mutableListOf<Reminder>()

                remindersMutex.withLock {
                    val iterator = remindersList.iterator()
                    while (iterator.hasNext()) {
                        val reminder = iterator.next()
                        if (reminder.reminderTimestampMillis <= now && !reminder.isSent) {
                            dueReminders.add(reminder)
                        }
                    }
                }

                for (reminder in dueReminders) {
                    var reminderSuccessfullyHandled = false

                    if (reminder.originalMessageIdToForward != null && reminder.originalChatIdToForwardFrom != null) {
                        println("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ø–µ—Ä–µ—Å—ã–ª–∫–∞): $reminder")
                        val forwardResult = bot.forwardMessage(
                            chatId = ChatId.fromId(reminder.userChatId),
                            fromChatId = ChatId.fromId(reminder.originalChatIdToForwardFrom),
                            messageId = reminder.originalMessageIdToForward,
                            disableNotification = false
                        )
                        if (forwardResult.isSuccess) {
                            reminderSuccessfullyHandled = true
                            bot.sendMessage(
                                chatId = ChatId.fromId(reminder.userChatId),
                                text = "üîî –ù–∞–ø–æ–º–∏–Ω–∞—é –æ–± —ç—Ç–æ–º! (—Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ)",
                                replyToMessageId = forwardResult.get().messageId
                            )
                        } else {
                            println("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${reminder.reminderId}: ${forwardResult.get().text ?: "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –æ—à–∏–±–∫–∏"}")
                            val fallbackText = "üîî –ù–∞–ø–æ–º–∏–Ω–∞—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –ø–µ—Ä–µ—Å–ª–∞–ª–∏ ${dateFormatter.format(Date(reminder.forwardedToBotAtMillis))}." +
                                    (if (!reminder.messageTextContent.isNullOrEmpty()) "\n\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: ¬´${reminder.messageTextContent.take(200)}...¬ª" else "\n(–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª. –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ç–∏–ø–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç).")
                            bot.sendMessage(ChatId.fromId(reminder.userChatId), text = fallbackText)
                            reminderSuccessfullyHandled = true
                        }
                    } else {
                        println("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—Ç–µ–∫—Å—Ç): $reminder")
                        val textToSend = "üîî –ù–∞–ø–æ–º–∏–Ω–∞—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –ø–µ—Ä–µ—Å–ª–∞–ª–∏ –±–æ—Ç—É ${dateFormatter.format(Date(reminder.forwardedToBotAtMillis))}." +
                                (if (!reminder.messageTextContent.isNullOrEmpty()) "\n\n–ï–≥–æ —Ç–µ–∫—Å—Ç –±—ã–ª: ¬´${reminder.messageTextContent}¬ª" else "\n(–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ).")
                        bot.sendMessage(
                            chatId = ChatId.fromId(reminder.userChatId),
                            text = textToSend
                        )
                        reminderSuccessfullyHandled = true
                    }

                    if (reminderSuccessfullyHandled) {
                        remindersMutex.withLock {
                            remindersList.find { it.reminderId == reminder.reminderId }?.isSent = true
                        }
                        println("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${reminder.reminderId} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")
                    }
                }

                remindersMutex.withLock {
                    remindersList.removeIf { it.isSent }
                }

            } catch (e: Exception) {
                println("–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${e.message}")
                e.printStackTrace()
            }
            delay(TimeUnit.SECONDS.toMillis(10))
        }
    }
    println("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω.")
}