package antilopinae;

import com.github.kotlintelegrambot.Bot
import com.github.kotlintelegrambot.bot
import com.github.kotlintelegrambot.dispatch
import com.github.kotlintelegrambot.dispatcher.command
import com.github.kotlintelegrambot.dispatcher.handlers.MessageHandlerEnvironment
import com.github.kotlintelegrambot.dispatcher.message
import com.github.kotlintelegrambot.entities.ChatId
import com.github.kotlintelegrambot.entities.InlineKeyboardMarkup
import com.github.kotlintelegrambot.entities.keyboard.InlineKeyboardButton
import com.github.kotlintelegrambot.entities.keyboard.WebAppInfo
import com.github.kotlintelegrambot.logging.LogLevel
import kotlinx.coroutines.*
import kotlinx.coroutines.sync.Mutex
import kotlinx.coroutines.sync.withLock
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.Json
import java.net.URLEncoder
import java.nio.charset.StandardCharsets
import java.util.Date
import java.util.concurrent.TimeUnit

val remindersList = mutableListOf<Reminder>()
val remindersMutex = Mutex()

fun main() {
    val botToken = System.getenv("SIGNAL_MESSAGE_BOT_TOKEN")
    val baseWebAppUrl = "https://antilopinae.github.io/Signal-Message-Telegram-Bot/"

    val bot = bot {
        token = botToken
        logLevel = LogLevel.Error

        dispatch {
            command("start") {
                val chatId = ChatId.fromId(message.chat.id)
                bot.sendMessage(
                    chatId = chatId,
                    text = "–ü—Ä–∏–≤–µ—Ç \uD83D\uDC4B\n" +
                            "\n" +
                            "–Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è. –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å, –∫–æ–≥–¥–∞ –∏ –∫–∞–∫ –æ –Ω—ë–º –Ω–∞–ø–æ–º–Ω–∏—Ç—å."
                )
                println("–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –¥–ª—è —á–∞—Ç–∞ ${chatId.id}")
            }

            message {
                val incomingMessage = message
                val currentChatId = ChatId.fromId(incomingMessage.chat.id)

                val webAppData = message.webAppData
                if (webAppData != null) {
                    val webAppDataJson = webAppData.data
                    println("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Web App: $webAppDataJson")

                    try {
                        @Serializable
                        data class ReminderRequestFromTwa(
                            val action: String,
                            val user_chat_id: String,
                            val reminder_type: String,
                            val reminder_timestamp_millis: Long,
                            val forwarded_to_bot_at_millis: Long,

                            val original_message_id: String? = null,
                            val original_chat_id: String? = null,
                            val text_content: String? = null
                        )

                        val request = Json { ignoreUnknownKeys = true }.decodeFromString<ReminderRequestFromTwa>(webAppDataJson.toString()) // Json { ignoreUnknownKeys = true }

                        if (request.action == "set_reminder") {
                            val newReminder = Reminder(
                                userChatId = request.user_chat_id.toLong(),
                                reminderTimestampMillis = request.reminder_timestamp_millis,
                                forwardedToBotAtMillis = request.forwarded_to_bot_at_millis, // –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–æ –≤—Ä–µ–º—è
                                originalMessageIdToForward = if (request.reminder_type == "forward") request.original_message_id?.toLongOrNull() else null,
                                originalChatIdToForwardFrom = if (request.reminder_type == "forward") request.original_chat_id?.toLongOrNull() else null,
                                messageTextContent = if (request.reminder_type == "text_content") request.text_content else null
                            )

                            val reminderDate = Date(request.reminder_timestamp_millis)
                            var confirmationText = "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ $reminderDate"
                            if (request.reminder_type == "text_content" && newReminder.messageTextContent.isNullOrEmpty()) {
                                confirmationText += " (—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—ã–ª –∑–∞—Ö–≤–∞—á–µ–Ω, –±—É–¥–µ—Ç –æ–±—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ)"
                            }
                            bot.sendMessage(
                                chatId = ChatId.fromId(request.user_chat_id.toLong()),
                                text = confirmationText
                            )
                        }
                    } catch (e: Exception) {
                        println("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Web App: ${e.message}")
                        e.printStackTrace()
                        // val possiblyUserChatId = Json.parseToJsonElement(webAppDataJson).jsonObject["user_chat_id"]?.jsonPrimitive?.contentOrNull?.toLongOrNull()
                        // if (possiblyUserChatId != null) {
                        //     bot.sendMessage(ChatId.fromId(possiblyUserChatId), "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
                        // }
                    }
                }
                else if (incomingMessage.forwardDate != null || incomingMessage.forwardFrom != null || incomingMessage.forwardFromChat != null) {
                    println("–ü–û–õ–£–ß–ï–ù–û –ü–ï–†–ï–°–õ–ê–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï (ID: ${incomingMessage.messageId}) –æ—Ç ${incomingMessage.chat.username ?: "N/A"}")
                    handleForwardedContent(this, baseWebAppUrl)
                }
                else if (incomingMessage.text != null) {
                    println("–ü–æ–ª—É—á–µ–Ω–æ –û–ë–´–ß–ù–û–ï –¢–ï–ö–°–¢–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${incomingMessage.chat.username ?: "N/A"} (ID: ${currentChatId.id}): '${incomingMessage.text}'")
                    bot.sendMessage(
                        chatId = currentChatId,
                        text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å."
                    )
                }
                else {
                    println("–ü–æ–ª—É—á–µ–Ω–æ –¥—Ä—É–≥–æ–µ (–Ω–µ —Ç–µ–∫—Å—Ç, –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ) —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${incomingMessage.chat.username ?: "N/A"} (ID: ${currentChatId.id})")
                    bot.sendMessage(
                        chatId = currentChatId,
                        text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å."
                    )
                }
            }
        }
    }

    bot.startPolling()

    startReminderScheduler(bot)
    println("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
}

private fun handleForwardedContent(env: MessageHandlerEnvironment, baseWebAppUrl: String) {
    val forwardedMessageToBot = env.message
    val userChatId = ChatId.fromId(forwardedMessageToBot.chat.id)

    val originalMessageIdForForward = forwardedMessageToBot.forwardFromMessageId
    val originalChatIdFromForForward = forwardedMessageToBot.forwardFromChat?.id
        ?: forwardedMessageToBot.forwardFrom?.id

    val eventHint = forwardedMessageToBot.text ?: forwardedMessageToBot.caption ?: "–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"
    val capturedTextContent = forwardedMessageToBot.text ?: forwardedMessageToBot.caption

    var webAppQueryParameters = "user_chat_id=${userChatId.id}" +
            "&event_hint=${URLEncoder.encode(eventHint.take(100), StandardCharsets.UTF_8.toString())}" +
            "&forwarded_to_bot_at=${forwardedMessageToBot.date}"

    if (originalMessageIdForForward != null && originalChatIdFromForForward != null) {
        webAppQueryParameters += "&type=forward" +
                "&original_message_id=$originalMessageIdForForward" +
                "&original_chat_id=$originalChatIdFromForForward"
        println("–ì–æ—Ç–æ–≤–∏–º TWA –¥–ª—è –ü–ï–†–ï–°–´–õ–ö–ò —Å–æ–æ–±—â–µ–Ω–∏—è ID $originalMessageIdForForward –∏–∑ —á–∞—Ç–∞ $originalChatIdFromForForward")
    } else {
        webAppQueryParameters += "&type=text_content"
        if (capturedTextContent != null) {
            webAppQueryParameters += "&text_content=${URLEncoder.encode(capturedTextContent.take(500), StandardCharsets.UTF_8.toString())}"
        }
        println("–ì–æ—Ç–æ–≤–∏–º TWA –¥–ª—è –û–¢–ü–†–ê–í–ö–ò –¢–ï–ö–°–¢–ê (–ø–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞). –¢–µ–∫—Å—Ç: $capturedTextContent")
    }

    val finalWebAppUrl = "$baseWebAppUrl?$webAppQueryParameters"
    println("URL –¥–ª—è WebApp: $finalWebAppUrl")

    val webAppInfo = WebAppInfo(url = finalWebAppUrl)
    val inlineKeyboardMarkup = InlineKeyboardMarkup.create(
        listOf(
            InlineKeyboardButton.WebApp("üóìÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", webAppInfo)
        )
    )

    env.bot.sendMessage(
        chatId = userChatId,
        text = "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è: '${eventHint.take(50)}...'",
        replyToMessageId = forwardedMessageToBot.messageId,
        replyMarkup = inlineKeyboardMarkup
    )
}

fun startReminderScheduler(bot: Bot) {
    GlobalScope.launch(Dispatchers.IO) {
        while (isActive) {
            try {
                val now = System.currentTimeMillis()
                val dueReminders = mutableListOf<Reminder>()

                remindersMutex.withLock {
                    val iterator = remindersList.iterator()
                    while(iterator.hasNext()){
                        val reminder = iterator.next()
                        if (reminder.reminderTimestampMillis <= now && !reminder.isSent) {
                            dueReminders.add(reminder)
                        }
                    }
                }

                for (reminder in dueReminders) {
                    if (reminder.originalMessageIdToForward != null && reminder.originalChatIdToForwardFrom != null) {
                        println("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–ø–µ—Ä–µ—Å—ã–ª–∫–∞): $reminder")
                        val forwardResult = bot.forwardMessage(
                            chatId = ChatId.fromId(reminder.userChatId),
                            fromChatId = ChatId.fromId(reminder.originalChatIdToForwardFrom),
                            messageId = reminder.originalMessageIdToForward,
                            disableNotification = false
                        )
                        if (!forwardResult.isSuccess) {
                            println("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${reminder.reminderId}: ${forwardResult.get().text ?: "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –æ—à–∏–±–∫–∏"}")
                            val fallbackText = "üîî –ù–∞–ø–æ–º–∏–Ω–∞—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –ø–µ—Ä–µ—Å–ª–∞–ª–∏ ${Date(reminder.forwardedToBotAtMillis)}." +
                                    (if (!reminder.messageTextContent.isNullOrEmpty()) "\n\n–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: ¬´${reminder.messageTextContent.take(200)}...¬ª" else "")
                            bot.sendMessage(ChatId.fromId(reminder.userChatId), text = fallbackText)
                        } else {
                            bot.sendMessage(
                                chatId = ChatId.fromId(reminder.userChatId),
                                text = "üîî –ù–∞–ø–æ–º–∏–Ω–∞—é –æ–± —ç—Ç–æ–º! (—Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã—à–µ)"
                                // replyToMessageId = forwardResult.first?.result?.messageId // –ú–æ–∂–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ
                            )
                        }
                    } else {
                        println("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—Ç–µ–∫—Å—Ç): $reminder")
                        val textToSend = "üîî –ù–∞–ø–æ–º–∏–Ω–∞—é –æ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –ø–µ—Ä–µ—Å–ª–∞–ª–∏ –±–æ—Ç—É ${Date(reminder.forwardedToBotAtMillis)}." +
                                (if (!reminder.messageTextContent.isNullOrEmpty()) "\n\n–ï–≥–æ —Ç–µ–∫—Å—Ç –±—ã–ª: ¬´${reminder.messageTextContent.take(3000)}¬ª" else "\n(–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–µ –±—ã–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ).") // –£–≤–µ–ª–∏—á–∏–ª –ª–∏–º–∏—Ç
                        bot.sendMessage(
                            chatId = ChatId.fromId(reminder.userChatId),
                            text = textToSend
                        )
                    }
                }

                remindersMutex.withLock {
                    remindersList.removeIf { it.isSent }
                }

            } catch (e: Exception) {
                println("–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${e.message}")
                e.printStackTrace()
            }
            delay(TimeUnit.SECONDS.toMillis(10))
        }
    }
    println("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω.")
}