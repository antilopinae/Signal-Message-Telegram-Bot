package antilopinae;

import com.github.kotlintelegrambot.Bot
import com.github.kotlintelegrambot.bot
import com.github.kotlintelegrambot.dispatch
import com.github.kotlintelegrambot.dispatcher.command
import com.github.kotlintelegrambot.dispatcher.handlers.MessageHandlerEnvironment
import com.github.kotlintelegrambot.dispatcher.message
import com.github.kotlintelegrambot.entities.ChatId
import com.github.kotlintelegrambot.entities.InlineKeyboardMarkup
import com.github.kotlintelegrambot.entities.keyboard.InlineKeyboardButton
import com.github.kotlintelegrambot.entities.keyboard.WebAppInfo
import com.github.kotlintelegrambot.logging.LogLevel
import kotlinx.coroutines.*
import kotlinx.coroutines.sync.Mutex
import kotlinx.coroutines.sync.withLock
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.Json
import java.util.Date
import java.util.concurrent.TimeUnit

val remindersList = mutableListOf<Reminder>()
val remindersMutex = Mutex()

fun main() {
    val botToken = System.getenv("SIGNAL_MESSAGE_BOT_TOKEN")
    val baseWebAppUrl = "https://calendar.google.com/calendar/u/0/r"

    val bot = bot {
        token = botToken
        logLevel = LogLevel.Error

        dispatch {
            command("start") {
                val chatId = ChatId.fromId(message.chat.id)
                bot.sendMessage(
                    chatId = chatId,
                    text = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á. –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –¥–æ–±–∞–≤–ª—é –µ–≥–æ –≤ —Ç–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ."
                )
                println("–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –¥–ª—è —á–∞—Ç–∞ ${chatId.id}")
            }

            message {
                val incomingMessage = message
                val currentChatId = ChatId.fromId(incomingMessage.chat.id)

                val webAppData = message.webAppData
                if (webAppData != null) {
                    val webAppDataJson = webAppData.data
                    println("–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç Web App: $webAppDataJson")

                    try {
                        @Serializable
                        data class ReminderRequestFromTwa(
                            val action: String,
                            val user_chat_id: String,
                            val original_message_id: String,
                            val original_chat_id: String,
                            val reminder_timestamp_millis: Long
                        )

                        val request = Json.decodeFromString<ReminderRequestFromTwa>(webAppDataJson!!)

                        if (request.action == "set_reminder") {
                            val newReminder = Reminder(
                                userChatId = request.user_chat_id.toLong(),
                                originalMessageId = request.original_message_id.toLong(),
                                originalChatId = request.original_chat_id.toLong(),
                                reminderTimestampMillis = request.reminder_timestamp_millis
                            )

                            GlobalScope.launch {
                                remindersMutex.withLock {
                                    remindersList.add(newReminder)
                                }
                            }
                            println("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ: $newReminder")

                            val reminderDate = Date(request.reminder_timestamp_millis)
                            bot.sendMessage(
                                chatId = ChatId.fromId(request.user_chat_id.toLong()),
                                text = "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ $reminderDate"
                            )
                        }
                    } catch (e: Exception) {
                        println("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Web App: ${e.message}")
                        e.printStackTrace()
                        // val possiblyUserChatId = Json.parseToJsonElement(webAppDataJson).jsonObject["user_chat_id"]?.jsonPrimitive?.contentOrNull?.toLongOrNull()
                        // if (possiblyUserChatId != null) {
                        //     bot.sendMessage(ChatId.fromId(possiblyUserChatId), "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
                        // }
                    }
                }
                else if (incomingMessage.forwardDate != null || incomingMessage.forwardFrom != null || incomingMessage.forwardFromChat != null) {
                    println("–ü–û–õ–£–ß–ï–ù–û –ü–ï–†–ï–°–õ–ê–ù–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï (ID: ${incomingMessage.messageId}) –æ—Ç ${incomingMessage.chat.username ?: "N/A"}")
                    handleForwardedContent(this, baseWebAppUrl)
                }
                else if (incomingMessage.text != null) {
                    println("–ü–æ–ª—É—á–µ–Ω–æ –û–ë–´–ß–ù–û–ï –¢–ï–ö–°–¢–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${incomingMessage.chat.username ?: "N/A"} (ID: ${currentChatId.id}): '${incomingMessage.text}'")
                    bot.sendMessage(
                        chatId = currentChatId,
                        text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å."
                    )
                }
                else {
                    println("–ü–æ–ª—É—á–µ–Ω–æ –¥—Ä—É–≥–æ–µ (–Ω–µ —Ç–µ–∫—Å—Ç, –Ω–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ) —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${incomingMessage.chat.username ?: "N/A"} (ID: ${currentChatId.id})")
                    bot.sendMessage(
                        chatId = currentChatId,
                        text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å."
                    )
                }
            }
        }
    }

    bot.startPolling()

    startReminderScheduler(bot)
    println("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π.")
}

private fun handleForwardedContent(env: MessageHandlerEnvironment, baseWebAppUrl: String) {
    val forwardedMessageToBot = env.message
    val userChatId = ChatId.fromId(forwardedMessageToBot.chat.id)

    val originalMessageId = forwardedMessageToBot.forwardFromMessageId
    val originalChatIdFrom = forwardedMessageToBot.forwardFromChat?.id
        ?: forwardedMessageToBot.forwardFrom?.id

    if (originalMessageId == null || originalChatIdFrom == null) {
        println("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ ID –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${forwardedMessageToBot.messageId}.")
        env.bot.sendMessage(
            chatId = userChatId,
            text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ –ø–µ—Ä–µ—Å—ã–ª–∫–∏). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –¥—Ä—É–≥–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞."
        )
        return
    }

    val eventHint = forwardedMessageToBot.text ?: forwardedMessageToBot.caption ?: "–ü–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç"

    // user_chat_id - —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–æ—Ç–æ–º, –∫—É–¥–∞ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ —Å–∞–º–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    // original_message_id - ID —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    // original_chat_id - ID —á–∞—Ç–∞, –ò–ó –ö–û–¢–û–†–û–ì–û –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–ª–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    val webAppQueryParameters =
        "user_chat_id=${userChatId.id}" +
                "&original_message_id=$originalMessageId" +
                "&original_chat_id=$originalChatIdFrom"

    val finalWebAppUrl = "$baseWebAppUrl?$webAppQueryParameters"
    println("URL –¥–ª—è WebApp (—Å ID –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è): $finalWebAppUrl")

    val webAppInfo = WebAppInfo(url = finalWebAppUrl)
    val inlineKeyboardMarkup = InlineKeyboardMarkup.create(
        listOf(
            InlineKeyboardButton.WebApp("üóìÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", webAppInfo)
        )
    )

    env.bot.sendMessage(
        chatId = userChatId,
        text = "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è: '${eventHint.take(50)}...'",
        replyToMessageId = forwardedMessageToBot.messageId,
        replyMarkup = inlineKeyboardMarkup
    )
}

fun startReminderScheduler(bot: Bot) {
    GlobalScope.launch(Dispatchers.IO) {
        while (isActive) {
            try {
                val now = System.currentTimeMillis()
                val dueReminders = mutableListOf<Reminder>()

                remindersMutex.withLock {
                    val iterator = remindersList.iterator()
                    while(iterator.hasNext()){
                        val reminder = iterator.next()
                        if (reminder.reminderTimestampMillis <= now && !reminder.isSent) {
                            dueReminders.add(reminder)
                            // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏" –∏–ª–∏ —É–¥–∞–ª—è–µ–º —Å—Ä–∞–∑—É,
                            // —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ.
                            // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, —Å–Ω–∞—á–∞–ª–∞ —Å–æ–±–µ—Ä–µ–º, –ø–æ—Ç–æ–º –æ–±—Ä–∞–±–æ—Ç–∞–µ–º –∏ —É–¥–∞–ª–∏–º/–ø–æ–º–µ—Ç–∏–º.
                        }
                    }
                }

                for (reminder in dueReminders) {
                    println("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: $reminder")

                    val forwardResult = bot.forwardMessage(
                        chatId = ChatId.fromId(reminder.userChatId),
                        fromChatId = ChatId.fromId(reminder.originalChatId),
                        messageId = reminder.originalMessageId,
                        disableNotification = false
                    )

                    if (!forwardResult.isSuccess) {
                        println("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ${reminder.reminderId}: ${forwardResult.get().text}")
                    }

                    bot.sendMessage(
                        chatId = ChatId.fromId(reminder.userChatId),
                        text = "üîî –ù–∞–ø–æ–º–∏–Ω–∞—é –æ–± —ç—Ç–æ–º!",
                    )

                    remindersMutex.withLock {
                        remindersList.find { it.reminderId == reminder.reminderId }?.isSent = true
                    }
                    println("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ${reminder.reminderId} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")
                }

                remindersMutex.withLock {
                    remindersList.removeIf { it.isSent }
                }

            } catch (e: Exception) {
                println("–û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: ${e.message}")
                e.printStackTrace()
            }
            delay(TimeUnit.SECONDS.toMillis(10))
        }
    }
    println("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω.")
}